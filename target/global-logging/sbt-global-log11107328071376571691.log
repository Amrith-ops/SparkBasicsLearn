[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\amrit\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\amrit\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.2 (Oracle Corporation Java 11.0.13)
[debug]       Load.loadUnit: plugins took 203.2465ms
[debug]       Load.loadUnit: defsScala took 0.5964ms
[debug] [Loading] Scanning directory C:\Users\amrit\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amrit\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 36.2876 ms
[debug]           Load.resolveProject(global-plugins) took 73.5221ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\amrit\.sbt\1.0\plugins, plugins: List(<none>))) took 161.6584ms
[debug] [Loading] Done in C:\Users\amrit\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 208.5761ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3778ms
[debug]     Load.loadUnit(file:/C:/Users/amrit/.sbt/1.0/plugins/, ...) took 431.1494ms
[debug]   Load.apply: load took 741.1784ms
[debug]   Load.apply: resolveProjects took 13.9632ms
[debug]   Load.apply: finalTransforms took 95.8635ms
[debug]   Load.apply: config.delegates took 15.1525ms
[debug]   Load.apply: Def.make(settings)... took 512.344ms
[debug]   Load.apply: structureIndex took 108.8188ms
[debug]   Load.apply: mkStreams took 1.6615ms
[info] loading global plugins from C:\Users\amrit\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3548.897ms
[debug]           Load.loadUnit: plugins took 61.6613ms
[debug]           Load.loadUnit: defsScala took 0.0079ms
[debug] [Loading] Scanning directory C:\Users\amrit\IdeaProjects\SparkBasicsLearn\project
[debug]             Load.loadUnit: mkEval took 16.0065ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amrit\IdeaProjects\SparkBasicsLearn\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.48 ms
[info] loading settings for project sparkbasicslearn-build from idea1.sbt ...
[debug]               Load.resolveProject(sparkbasicslearn-build) took 3.8536ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkbasicslearn-build, base: C:\Users\amrit\IdeaProjects\SparkBasicsLearn\project, plugins: List(<none>))) took 7.1234ms
[debug] [Loading] Done in C:\Users\amrit\IdeaProjects\SparkBasicsLearn\project, returning: (sparkbasicslearn-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2738.422ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.4151ms
[debug]         Load.loadUnit(file:/C:/Users/amrit/IdeaProjects/SparkBasicsLearn/project/, ...) took 2808.5771ms
[debug]       Load.apply: load took 2811.533ms
[debug]       Load.apply: resolveProjects took 0.1206ms
[debug]       Load.apply: finalTransforms took 12.3393ms
[debug]       Load.apply: config.delegates took 0.4797ms
[debug]       Load.apply: Def.make(settings)... took 88.4114ms
[debug]       Load.apply: structureIndex took 39.8093ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\amrit\IdeaProjects\SparkBasicsLearn\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4605.7841ms
[debug]     Load.loadUnit: defsScala took 0.0065ms
[debug] [Loading] Scanning directory C:\Users\amrit\IdeaProjects\SparkBasicsLearn
[debug]       Load.loadUnit: mkEval took 0.6373ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amrit\IdeaProjects\SparkBasicsLearn, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.4436 ms
[info] loading settings for project sparkbasicslearn from build.sbt ...
[debug]         Load.resolveProject(sparkbasicslearn) took 57.203ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkbasicslearn, base: C:\Users\amrit\IdeaProjects\SparkBasicsLearn, plugins: List(<none>))) took 63.8391ms
[debug] [Loading] Done in C:\Users\amrit\IdeaProjects\SparkBasicsLearn, returning: (sparkbasicslearn)
[debug]     Load.loadUnit: loadedProjectsRaw took 2048.1797ms
[debug]     Load.loadUnit: cleanEvalClasses took 32.8671ms
[debug]   Load.loadUnit(file:/C:/Users/amrit/IdeaProjects/SparkBasicsLearn/, ...) took 6687.9396ms
[debug] Load.apply: load took 6691.5262ms
[debug] Load.apply: resolveProjects took 0.2076ms
[debug] Load.apply: finalTransforms took 40.7148ms
[debug] Load.apply: config.delegates took 0.5202ms
[debug] Load.apply: Def.make(settings)... took 87.7212ms
[debug] Load.apply: structureIndex took 28.5893ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to HelloSpark (in build file:/C:/Users/amrit/IdeaProjects/SparkBasicsLearn/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50183 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50183, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to HelloSpark (in build file:/C:/Users/amrit/IdeaProjects/SparkBasicsLearn/)
[debug] > Exec(idea-shell, None, None)
